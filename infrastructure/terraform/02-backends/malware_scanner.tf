### Storage for malware signatures database
resource "google_storage_bucket" "malware_signatures_mirror" {
  name     = "${local.name_prefix}-malware-signatures-mirror"
  location = var.region
  project  = var.project

  uniform_bucket_level_access = true
  public_access_prevention    = "enforced"

  versioning {
    enabled = false
  }

  provisioner "local-exec" {
    working_dir = "./malware-scanner"
    command     = "make initiate_malware_database_mirror"

    environment = {
      CVD_MIRROR_BUCKET_NAME = google_storage_bucket.malware_signatures_mirror.name
    }
  }
}

### IAM
resource "google_service_account" "malware_scanner" {
  account_id   = "${local.name_prefix}-malware-scanner"
  display_name = "${local.name_prefix}-malware-scanner"
  description  = "Service Account for Malware Scanner to run in Cloud Run"
}

resource "google_storage_bucket_iam_member" "malware_scanner_signatures_bucket" {
  bucket = google_storage_bucket.malware_signatures_mirror.name
  role   = "roles/storage.objectAdmin"
  member = "serviceAccount:${google_service_account.malware_scanner.email}"
}

resource "google_storage_bucket_iam_member" "malware_scanner_manufacturer_portal_unscanned_files" {
  bucket = google_storage_bucket.manufacturer_portal_uploads_unscanned.name
  role   = "roles/storage.objectAdmin"
  member = "serviceAccount:${google_service_account.malware_scanner.email}"
}

resource "google_storage_bucket_iam_member" "malware_scanner_manufacturer_portal_quarantined_files" {
  bucket = google_storage_bucket.manufacturer_portal_uploads_quarantined.name
  role   = "roles/storage.objectAdmin"
  member = "serviceAccount:${google_service_account.malware_scanner.email}"
}

resource "google_storage_bucket_iam_member" "malware_scanner_manufacturer_portal_safe_files" {
  bucket = google_storage_bucket.manufacturer_portal_uploads_safe.name
  role   = "roles/storage.objectAdmin"
  member = "serviceAccount:${google_service_account.malware_scanner.email}"
}

resource "google_cloud_run_service_iam_member" "malware_scanner_invoke" {
  service = google_cloud_run_v2_service.malware_scanner.name
  role    = "roles/run.invoker"
  member  = "serviceAccount:${google_service_account.malware_scanner.email}"
}

resource "google_project_iam_member" "malware_scanner_event_receiver" {
  project = var.project
  role    = "roles/eventarc.eventReceiver"
  member  = "serviceAccount:${google_service_account.malware_scanner.email}"
}

resource "google_project_iam_member" "malware_scanner_metric_writer" {
  project = var.project
  role    = "roles/monitoring.metricWriter"
  member  = "serviceAccount:${google_service_account.malware_scanner.email}"
}

data "google_storage_project_service_account" "gcs_account" {}

resource "google_project_iam_member" "cloud_storage_pub_sub_publisher" {
  project = var.project
  role    = "roles/pubsub.publisher"
  member  = "serviceAccount:${data.google_storage_project_service_account.gcs_account.email_address}"
}

### Cloud Run – scanner
resource "google_cloud_run_v2_service" "malware_scanner" {
  name     = "${local.name_prefix}-malware-scanner"
  location = var.region
  ingress  = "INGRESS_TRAFFIC_INTERNAL_ONLY"

  template {
    service_account = google_service_account.malware_scanner.email

    scaling {
      min_instance_count = var.malware_scanner_min_instance_count
      max_instance_count = var.malware_scanner_max_instance_count
    }

    max_instance_request_concurrency = 20

    containers {
      image = "${local.image_repository_url}/zev-malware-scanner:latest"

      resources {
        # Disabled to perform background operations like updating malware definitions
        cpu_idle          = false
        startup_cpu_boost = true
        limits = {
          cpu    = var.malware_scanner_cpu_quota
          memory = var.malware_scanner_ram_quota
        }
      }

      env {
        name  = "UNSCANNED_BUCKET_NAME"
        value = google_storage_bucket.manufacturer_portal_uploads_unscanned.name
      }

      env {
        name  = "CLEAN_BUCKET_NAME"
        value = google_storage_bucket.manufacturer_portal_uploads_safe.name
      }

      env {
        name  = "QUARANTINED_BUCKET_NAME"
        value = google_storage_bucket.manufacturer_portal_uploads_quarantined.name
      }

      env {
        name  = "CVD_MIRROR_BUCKET_NAME"
        value = google_storage_bucket.malware_signatures_mirror.name
      }
    }
  }

  depends_on = [
    null_resource.docker_build,
  ]
}

resource "null_resource" "docker_build" {
  triggers = {
    malware_scanner_src_sha = sha1(
      join("", [
        for file in fileset("${path.module}/malware-scanner/", "*") : filesha1("${path.module}/malware-scanner/${file}")
        if !startswith(file, "cvds") && !startswith(file, "pyenv")
      ])
    )
  }

  provisioner "local-exec" {
    working_dir = "./malware-scanner"
    command     = "make docker-build && make docker-push"

    environment = {
      REGISTRY_URL = local.image_repository_url
    }
  }
}

### Scheduler job – malware definitions update
resource "google_cloud_scheduler_job" "malware_definitions_update" {
  name        = "${local.name_prefix}-malware-defs-mirror-update"
  description = "Updates malware definitions mirror"
  schedule    = "28 */2 * * *"
  time_zone   = "Europe/London"

  http_target {
    http_method = "POST"
    uri         = google_cloud_run_v2_service.malware_scanner.uri
    body        = base64encode("{\"kind\":\"schedule#cvd_update\"}")
    headers = {
      "Content-Type" = "application/json"
    }

    oidc_token {
      service_account_email = google_service_account.malware_scanner.email
    }
  }
}

### Scan triggers
resource "google_eventarc_trigger" "scan_file_uploaded_to_manufacturer_portal" {
  name     = "${local.name_prefix}-scan-file-uploaded-to-manufacturer-portal"
  location = var.region

  matching_criteria {
    attribute = "type"
    value     = "google.cloud.storage.object.v1.finalized"
  }

  matching_criteria {
    attribute = "bucket"
    value     = google_storage_bucket.manufacturer_portal_uploads_unscanned.id
  }

  destination {
    cloud_run_service {
      service = google_cloud_run_v2_service.malware_scanner.name
      region  = var.region
    }
  }

  service_account = google_service_account.malware_scanner.email

  depends_on = [
    # GCP API verifies permissions before creating the trigger
    google_project_iam_member.cloud_storage_pub_sub_publisher
  ]

  # Subscription ACK deadline should be adjusted to handle bigger files.
  # Pub/Sub subscription is created automatically when adding a trigger.
  # Currently it is not possible to configure the subscription directly in the trigger setup [1].
  # Therefore local provisioner has been used to avoid importing the subscription to Terraform state.
  # [1] https://github.com/hashicorp/terraform-provider-google/issues/12254
  provisioner "local-exec" {
    command = "gcloud pubsub subscriptions update $SUBSCRIPTION_NAME --ack-deadline=$DEADLINE_SECONDS"

    environment = {
      SUBSCRIPTION_NAME = one(one(google_eventarc_trigger.scan_file_uploaded_to_manufacturer_portal.transport).pubsub).subscription
      DEADLINE_SECONDS  = "120"
    }
  }
}
