{"version":3,"file":"file-upload.js","mappings":";;;;;AAAA;;AAEA;AACA;AACA,WAAW,kBAAkB;AAC7B,aAAa,UAAU;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,UAAU;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oDAAoD,MAAM;AAC5E;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU,4BAA4B,MAAM;AAC5C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,gBAAgB;AACtE;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,CAAC","sources":["webpack://informed.insight.template/./js/file-upload.js"],"sourcesContent":["//let MODE = 'upload' // 'upload' or 'submit';\n\n/**\n * Validates the file input and returns an array of error messages.\n * @param {HTMLInputElement} fileInput - The file input element.\n * @returns {string[]} - Array of error messages.\n */\nfunction validateFileInput(fileInput) {\n    const errorMessages = [];\n    const file = fileInput.files[0];\n\n    if (!file) {\n        errorMessages.push('Please select a file to upload.');\n    }\n\n    if (typeof SIZE_LIMIT !== 'undefined' && file && file.size > SIZE_LIMIT) {\n        errorMessages.push('The file is too large.');\n    }\n\n    if (Array.isArray(VALID_EXTENSIONS) && VALID_EXTENSIONS.length > 0 && file) {\n        const fileExtension = file.name.split('.').pop().toLowerCase();\n        if (!VALID_EXTENSIONS.includes(fileExtension)) {\n            errorMessages.push('The file type is not supported.');\n        }\n    }\n\n    return errorMessages;\n}\n\n/**\n * Draws error messages on the page.\n * @param {string[]} errors - Array of error messages.\n */\nfunction drawErrors(errors) {\n    hideErrors();\n\n    const errorsSummary = document.createElement('div');\n    errorsSummary.setAttribute('aria-labelledby', 'error-summary-title');\n    errorsSummary.setAttribute('role', 'alert');\n    errorsSummary.setAttribute('tabindex', '-1');\n    errorsSummary.classList.add('govuk-error-summary');\n    errorsSummary.innerHTML = `\n        <h2 class='govuk-error-summary__title' id='error-summary-title'>There is a problem</h2>\n        <div class='govuk-error-summary__body'>\n            <ul class='govuk-list govuk-error-summary__list'>\n                ${errors.map(error => `<li><a href='#UploadedFiles'>${error}</a></li>`).join('')}\n            </ul>\n        </div>\n    `;\n    document.getElementById('main-content').prepend(errorsSummary);\n\n    const formGroup = document.querySelector('.govuk-form-group');\n    formGroup.classList.add('govuk-form-group--error');\n\n    const inputErrors = document.createElement('span');\n    inputErrors.classList.add('govuk-error-message');\n    inputErrors.innerHTML = `\n        <span class='govuk-visually-hidden'>Error</span>\n        ${errors.map(error => `<div>${error}</div>`).join('')}\n    `;\n    document.querySelector('.govuk-form-group .govuk-file-upload').insertAdjacentElement('beforebegin', inputErrors);\n\n    const fileUpload = document.querySelector('.govuk-file-upload');\n    fileUpload.classList.add('govuk-file-upload--error');\n}\n\n/**\n * Hides error messages on the page.\n */\nfunction hideErrors() {\n    const errorSummary = document.querySelector('.govuk-error-summary');\n    if (errorSummary) {\n        errorSummary.remove();\n    }\n\n    const formGroup = document.querySelector('.govuk-form-group');\n    formGroup.classList.remove('govuk-form-group--error');\n\n    const errorMessage = document.querySelector('.govuk-form-group .govuk-error-message');\n    if (errorMessage) {\n        errorMessage.remove();\n    }\n\n    const fileUpload = document.querySelector('.govuk-file-upload');\n    fileUpload.classList.remove('govuk-file-upload--error');\n}\n\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    // Get elements\n    const uploadForm = document.querySelector('.async-upload-form');\n    const uploadSubmit = document.querySelector('.async-upload-submit');\n    const fileInput = document.querySelector('.async-upload-input');\n\n    const submitFileButton = document.querySelector('.submit-file-button');\n    const progressBar = document.querySelector('.async-upload-progress');\n    const progressText = document.querySelector('.async-upload-progress-text');\n    const uploadFileName = document.querySelector('.async-upload-file-name');\n    const submtiStageContainer = document.querySelector('.submit-stage-container');\n    const cancelUploadButton = document.querySelector('.cancel-file-upload');\n    \n    const xhr = new XMLHttpRequest();\n\n    cancelUploadButton.addEventListener('click', function (e) {\n        e.preventDefault();\n        uploadForm.style.display = 'block';\n        submtiStageContainer.style.display = 'none';\n        progressBar.style.display = 'none';\n        uploadSubmit.disabled = false;\n        xhr.abort();\n    });\n\n    fileInput.addEventListener('change', function () {\n        hideErrors();\n        uploadFileName.innerHTML = fileInput.files[0].name;\n        const errorMessages = validateFileInput(fileInput);\n        if (errorMessages.length > 0) {\n            drawErrors(errorMessages);\n            uploadSubmit.disabled = true;\n            return;\n        }else {\n            uploadSubmit.disabled = false;\n        }\n    });\n\n    uploadSubmit.addEventListener('click', function (e) {\n        e.preventDefault();\n\n        // Disable the submit button\n        uploadSubmit.disabled = true;\n        uploadForm.style.display = 'none';\n        submtiStageContainer.style.display = 'block';\n\n        submitFileButton.disabled = true;\n        // Create a new FormData object\n        const formData = new FormData(uploadForm);\n\n        // Show the progress bar\n        progressBar.style.display = 'block';\n\n        // Create a new XMLHttpRequest\n\n        // Track upload progress\n        xhr.upload.addEventListener('progress', function (event) {\n            if (event.lengthComputable) {\n                const percentComplete = (event.loaded / event.total) * 100;\n                const val = Math.min(percentComplete, 90);\n                progressBar.value = val;\n                progressText.innerHTML = `Uploading ${Math.round(val)}%`;\n            }\n        });\n\n        // Handle successful upload\n        xhr.onload = function () {\n            if (xhr.status === 200) {\n                document.querySelector('.upload-status-container').style.display = 'none';\n                document.querySelector('.uploaded-status').style.display = 'block';\n\n\n                //This is UX improvement so user can see the progress bar at 100% for a short time\n                setTimeout(function () {\n                    //window.location.href = '/Data/upload-success';\n                    submitFileButton.disabled = false;\n                }, 333);\n            } else {\n                // Enable the submit button if the upload failed\n                uploadSubmit.disabled = false;\n            }\n        };\n\n        // Handle errors\n        xhr.onerror = function () {\n            console.error('Error during upload');\n            // Enable the submit button if an error occurred\n            uploadSubmit.disabled = false;\n        };\n\n        // Send the request\n        xhr.open('POST', '/data/upload-file', true);\n        xhr.send(formData);\n    });\n});\n"],"names":[],"sourceRoot":""}